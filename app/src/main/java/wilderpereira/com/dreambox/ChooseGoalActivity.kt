package wilderpereira.com.dreambox

import android.os.AsyncTask
import android.os.Bundle
import android.support.v7.app.AppCompatActivity
import android.util.Log
import android.view.View
import com.google.gson.Gson
import okhttp3.MediaType
import okhttp3.OkHttpClient
import okhttp3.RequestBody
import wilderpereira.com.dreambox.model.Feature
import wilderpereira.com.dreambox.model.Image
import wilderpereira.com.dreambox.model.Request
import wilderpereira.com.dreambox.model.VisionDTO
import wilderpereira.com.dreambox.model.response.Response
import wilderpereira.com.dreambox.model.response.VisionResponseDTO
import java.util.ArrayList

class ChooseGoalActivity : AppCompatActivity() {

    val Tag: String = "Async"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_choose_goal)
    }

    fun goalContinue(view: View) {
        //TODO: display dialog: "analisando seu extrato, verificamos que essa pode não ser a sua melhor opção - mostrar extrato etc"
    }

    fun photoClick(view: View) {
        vision().execute()
    }

    fun audioClick(view: View) {

    }

    inner class vision: AsyncTask<String, String, String>() {

        override fun doInBackground(vararg p0: String?): String {

            //calling Google Vision API
            try {
                val image = Image()
                image.content = ""

                val labelDetectionFeature = Feature()
                labelDetectionFeature.type = "LABEL_DETECTION"

                val webDetectionFeature = Feature()
                webDetectionFeature.type = "WEB_DETECTION"

                val requests = Request()
                requests.features = mutableListOf(labelDetectionFeature, webDetectionFeature)
                requests.image = image

                val visionDto = VisionDTO()
                visionDto.requests = arrayListOf(requests)


//                val client =  OkHttpClient().newBuilder().hostnameVerifier { s, sslSession -> true}.build()
                val client =  OkHttpClient().newBuilder().build()

                val requestBody = RequestBody.create(MediaType.parse("application/json; charset=utf-8"), Gson().toJson(visionDto))

                val request = okhttp3.Request.Builder()
                        .url("https://vision.googleapis.com/v1/images:annotate?key=AIzaSyAVl9Z6AsGdrv-wnmZGXvDzJCGjbnRg42g")
                        .post(requestBody)
                        .build()

                return client.newCall(request).execute().body()!!.string()
            } catch(Ex: Exception) {
                Log.d("Async", "Error in doInBackground " + Ex.message);
            }
            return ""
        }

        override fun onPostExecute(result: String?) {
            super.onPostExecute(result)
            val response = Gson().fromJson(result, VisionResponseDTO::class.java)
            Log.d(Tag, response.toString())
        }
    }
}
